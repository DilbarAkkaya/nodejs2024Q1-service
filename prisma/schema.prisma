// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id        String   @unique @id @default(uuid())
  login     String
  version   Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  password  String
}

model Artist {
  id String @unique @id @default(uuid())
  name String
  grammy Boolean
  Album Album[]
  Track Track[]
  FavoriteArtist FavoriteArtist[]
}

model Album {
  id String @unique @id @default(uuid())
  name String
  year Int
  artist Artist? @relation(fields: [artistId], references: [id], onDelete: SetNull)
  artistId String?
  Track Track[]
  FavoriteAlbum FavoriteAlbum[]
}
model Track {
  id String @unique @id @default(uuid())
  name String
  duration Int
  artistId String?
  albumId String?
  artist Artist? @relation(fields: [artistId], references: [id], onDelete: SetNull)
  album Album? @relation(fields: [albumId], references: [id], onDelete: SetNull)
  FavoriteTrack FavoriteTrack[]
}

model FavoriteAlbum {
  id String @id @default(uuid())
  album Album @relation(fields: [albumId], references: [id], onDelete: Cascade)
  albumId String @unique
}
model FavoriteArtist {
  id String @id @default(uuid())
  artist Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId String @unique
}
model FavoriteTrack {
  id String @id @default(uuid())
  track Track @relation(fields: [trackId], references: [id], onDelete: Cascade)
  trackId String @unique
}